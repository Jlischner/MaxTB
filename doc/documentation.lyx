#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\topmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Documentation
\end_layout

\begin_layout Author
Authors: Hanwen Jin, Simão Meneses João, Johannes Lischner
\end_layout

\begin_layout Standard
This document contains the documentation of our hot carrier generation code,
 as well as an explanation of the methods involved and physical interpretation
 of the objects being used.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Overview
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Metallic nanoparticles have a very special interaction with light.
 When light shines on a metal, conduction electrons oscillate back and forth
 driven by the electric field.
 This non-equilibrium configuration excites electrons into more energetic
 unoccupied states creating a very energetic electron-hole pair.
 These carriers can be very energetic (hot carriers) and can be harnessed
 for many applications.
 Plasmonic photocatalysis is one such example.
 
\end_layout

\begin_layout Section
Fermi Golden Rule
\end_layout

\begin_layout Standard
Fermi's Golden Rule provides the rate of transitions to states with energy
 
\begin_inset Formula $E$
\end_inset

 due to a perturbation.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
N_{e}\left(E,\omega\right)=\frac{2}{V}\sum_{if}\Gamma_{if}\left(\omega\right)\delta\left(E-E_{f}\right)
\]

\end_inset

where 
\begin_inset Formula 
\[
\Gamma_{if}=\frac{2\pi}{\hbar}\left|\left\langle f\left|\phi_{\text{tot}}\left(\omega\right)\right|i\right\rangle \right|^{2}\delta\left(E_{f}-E_{i}-\hbar\omega\right)f\left(E_{i}\right)\left(1-f\left(E_{f}\right)\right).
\]

\end_inset


\begin_inset Formula $N_{e}\left(E,\omega\right)dE$
\end_inset

 is interpreted as the number of transitions per unit time with energy between
 
\begin_inset Formula $E$
\end_inset

 and 
\begin_inset Formula $E+dE$
\end_inset

 due to a perturbation of frequency 
\begin_inset Formula $\omega$
\end_inset

.
 The interpretation of each of the terms is the following:
\end_layout

\begin_layout Enumerate
The electric field does not affect every pair of states in the same manner.
 The number 
\begin_inset Formula $\left\langle f\left|\phi_{\text{tot}}\left(\omega\right)\right|i\right\rangle $
\end_inset

 codifies this effect.
 
\end_layout

\begin_layout Enumerate
The product of Fermi functions 
\begin_inset Formula $f\left(E_{i}\right)\left(1-f\left(E_{f}\right)\right)$
\end_inset

 ensures that only initial states below the Fermi energy and final states
 above the Fermi energy contribute to this integral.
 A finite temperature relaxes this restriction slightly.
 
\end_layout

\begin_layout Enumerate
The second Dirac delta 
\begin_inset Formula $\delta\left(E_{f}-E_{i}-\hbar\omega\right)$
\end_inset

 is a consequence of the interaction with the electric field of frequency
 
\begin_inset Formula $\omega$
\end_inset

.
 The electric field only causes transitions which change the energy by 
\begin_inset Formula $\hbar\omega$
\end_inset

.
 In practice, there are many mechanisms going on inside the nanoparticle,
 which slightly violate this restriction, so the Dirac delta is instead
 approximated by a gaussian of a certain width 
\begin_inset Formula $\gamma$
\end_inset

, denoted by 
\begin_inset Formula $\delta_{\gamma}$
\end_inset


\end_layout

\begin_layout Enumerate
The first Dirac delta 
\begin_inset Formula $\delta\left(E-E_{f}\right)$
\end_inset

 means that only final states which have energy 
\begin_inset Formula $E$
\end_inset

 are to be considered.
 Like before, this Dirac delta can also be approximated by a gaussian of
 a certain (different) width 
\begin_inset Formula $\lambda$
\end_inset

, representing the limited resolution of the measuring apparatus.
 If this is ignored, we have infinite resolution, which gives rise to sharp
 peaks.
\end_layout

\begin_layout Subsubsection*
Comment on units
\end_layout

\begin_layout Standard
In this document, these are the units being used
\end_layout

\begin_layout Itemize
Energy: eV
\end_layout

\begin_layout Itemize
Voltage: Volts
\end_layout

\begin_layout Itemize
Length: nanometers
\end_layout

\begin_layout Itemize
Time: second
\end_layout

\begin_layout Standard
So the physical constants have the following values:
\end_layout

\begin_layout Itemize
Planck's constant: 
\begin_inset Formula $\hbar=6.582\times10^{-16}\text{eV s}=2.42\times10^{-17}\text{Ha s}$
\end_inset

 
\end_layout

\begin_layout Standard
For reference, the electric field 
\begin_inset Formula $E_{\text{ref}}$
\end_inset

 used in experiments is such that the illumination intensity is 
\begin_inset Formula $I=1$
\end_inset

mW/
\begin_inset Formula $\mu\text{m}^{2}$
\end_inset

, so 
\begin_inset Formula $E_{\text{ref}}=8.7\times10^{5}\text{Volt/m}=8.7\times10^{-4}\text{Volt/nm}$
\end_inset

.
 For comparison, the average solar intensity on Earth's surface is 
\begin_inset Formula $1360\text{W}/\text{m}^{2}$
\end_inset

, which is about 
\begin_inset Formula $10^{6}$
\end_inset

 times weaker!
\end_layout

\begin_layout Subsection*
Electrostatic potential
\end_layout

\begin_layout Standard
The electric potential in the quasistatic approximation is found using COMSOL
 by defining a geometry and providing the dielectric constant at a certain
 frequency 
\begin_inset Formula $\omega$
\end_inset

.
 COMSOL then provides the electrostatic potential at each point in space
 as a result.
 See the next section for more details.
\end_layout

\begin_layout Subsection*
Calculation of the Fermi Golden Rule
\end_layout

\begin_layout Standard
In practice, for large nanoparticles, the form used for the Fermi golden
 rule is the following:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
N_{e}\left(E,\omega\right)=\frac{4\pi}{\hbar V}\left(1-f\left(E\right)\right)\int_{-\infty}^{\infty}d\varepsilon f\left(\varepsilon\right)\delta_{\gamma}\left(E-\varepsilon-\hbar\omega\right)\Phi_{\omega}\left(\varepsilon,E\right)\label{eq: HC generation rate infinite precision}
\end{equation}

\end_inset

 where
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Phi_{\omega}\left(\varepsilon,\varepsilon^{\prime}\right)=\text{Tr}\left[\phi_{\text{tot}}\left(\omega\right)\delta\left(\varepsilon-H\right)\phi_{\text{tot}}^{\dagger}\left(\omega\right)\delta\left(\varepsilon^{\prime}-H\right)\right]
\]

\end_inset

represents the optical matrix in energy space rather than the eigenbasis
 of the Hamiltonian.
 It is calculated by decomposing it into a double Chebyshev expansion
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\Phi_{\omega}\left(\varepsilon,\varepsilon^{\prime}\right)=\sum_{n=0}^{M-1}\sum_{m=0}^{M-1}\Delta_{n}\left(\varepsilon\right)\Delta_{m}\left(\varepsilon^{\prime}\right)\mu_{nm}\label{eq: Optical matrix element as Cheb expansion}
\end{equation}

\end_inset

where
\begin_inset Formula 
\begin{equation}
\mu_{nm}=\text{Tr}\left[\phi_{\text{tot}}\left(\omega\right)T_{n}\left(H\right)\phi_{\text{tot}}^{\dagger}\left(\omega\right)T_{m}\left(H\right)\right]\label{eq: Cheb moments}
\end{equation}

\end_inset

is the matrix of Chebyshev moments.
 
\begin_inset Formula $T_{n}\left(H\right)$
\end_inset

 is the 
\begin_inset Formula $n$
\end_inset

-th Chebyshev polynomial with a matrix argument.
 
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Quick-start guide
\end_layout

\begin_layout Standard
The code is separated into four distinct sections, each for a distinct operation.
 The main sections are: 1) Generating the atomic positions inside the nanopartic
le shape; 2) Computing the electric potential for those positions; 3) Calculatin
g the Chebyshev moments with this potential and 4) Resumming the Chebyshev
 series to obtain the hot carrier generation rate.
 The following code can be found under the 
\begin_inset Formula $\texttt{examples}$
\end_inset

 folder.
\end_layout

\begin_layout Enumerate
First, we need to generate the positions of the atoms within the nanoparticle.
 So we specify which shape we want and its size by calling for example
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{julia src/generate\_positions.jl sphere 2.0 positions.dat false}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The first argument is the shape.
 
\begin_inset Formula $\texttt{sphere}$
\end_inset

 can be replaced by 
\begin_inset Formula $\texttt{octahedron}$
\end_inset

, 
\begin_inset Formula $\texttt{cube}$
\end_inset

 or 
\begin_inset Formula $\texttt{rhombic}$
\end_inset


\series bold

\begin_inset Quotes erd
\end_inset


\series default
 to produce other shapes.
 The meaning of the second argument depends on the shape.
 If the shape is a sphere, then the second argument is its radius in nanometers.
 If the shape is any of the other three options, it represents the length
 of any of their edges, in nanometers.
 The last argument is a flag which if set to true, will rescale the atomic
 positions so that the whole nanoparticle fits inside a cube of dimensions
 
\begin_inset Formula $3\times3\times3$
\end_inset

nm.
 This is for technical purposes (see section on Comsol rescaling) and normally
 the flag should be set to false.
 The positions get written to a file specified by the third argument, here
 it was called 
\series bold

\begin_inset Formula $\texttt{positions.dat}$
\end_inset


\series default
.
 This file is in a format which can be read by Comsol if needed.
 The first 
\begin_inset Formula $9$
\end_inset

 lines of this file are the Comsol header.
 Following these lines, there are three columns, with the coordinates of
 the atoms inside the nanoparticle in units of nm.
 [images here]
\end_layout

\begin_layout Enumerate
Use the positions to generate the potential inside the nanoparticle.
 This requires the frequency of the incoming electric field as an input.
 If the nanoparticle is a sphere, the potential inside it has a known exact
 shape, which can be evaluated directly in Julia.
 If the shape isn't a sphere, then the potential has to be found by solving
 Maxwell's equations inside the nanoparticle.
 This is done with Comsol (see later sections for details on this).
 Assuming the nanoparticle is a sphere, we can run the following line to
 produce the potential
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{julia src/potential\_sphere.jl positions.dat potential.dat 1.9}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The first argument is the set of atomic positions inside the nanoparticle,
 the second argument is the name of the output file and the third argument
 is the frequency of the external electric field in units of eV, assuming
 the electric field is oriented along the 
\begin_inset Formula $z$
\end_inset

 direction.
 The potential calculated is the following
\begin_inset Newline newline
\end_inset


\begin_inset Formula 
\[
\phi_{\text{tot}}\left(\omega,z\right)=\frac{3\varepsilon_{m}}{\varepsilon\left(\omega\right)+2\varepsilon_{m}}\left(-e\right)E_{0}z
\]

\end_inset

where 
\begin_inset Formula $E_{0}=1\text{V/nm}$
\end_inset

, 
\begin_inset Formula $z$
\end_inset

 is the position along the 
\begin_inset Formula $z$
\end_inset

 axis in nanometers and 
\begin_inset Formula $-e<0$
\end_inset

 is the electron charge.
 
\begin_inset Formula $\varepsilon_{m}=2$
\end_inset

 is the relative permittivity of the environment and 
\begin_inset Formula $\varepsilon\left(\omega\right)$
\end_inset

 is the (frequency-dependent) relative dielectric constant of the material
 used in the nanoparticle - gold in this case.
 The output file containing the potential consists of a 9-line header followed
 by four columns.
 The first three columns represent the 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $y$
\end_inset

 and 
\begin_inset Formula $z$
\end_inset

 coordinates of the atoms (in nanometers) and the fourth column represents
 the complex electric potential at those points, in units of Volt.
\end_layout

\begin_layout Enumerate
Use the potential to generate the Chebyshev moment.
 Example:
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{julia src/moments.jl potential.dat output.h5 sphere 2.0 1000 10}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The first argument is the file with the electric potential, the second argument
 is the name of the file to which the Chebyshev moments will be written,
 the third argument is the shape, the fourth is the length associated with
 that shape (this has to be exactly the same value as used to obtain the
 atomic positions - see first point), the fifth is the number of Chebyshev
 polynomials to use in the expansion and the last argument is the number
 of random vectors used to compute the trace.
\end_layout

\begin_layout Enumerate
Use the Chebyshev moments to calculate the hot carrier generation rate.
 Example:
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{julia src/process\_moments.jl output.h5 rates.dat 1.9 0.2595 1000 70}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The first argument is the output from the previous point - the file with
 the Chebyshev moments.
 The second argument is the name of the file to be used as output with the
 hot carrier generation rates.
 The third argument is the frequency of the electric field (has to be identical
 to the one used in point 2) in units of eV.
 The fourth argument is the Fermi energy in units of Hartree.
 The fifth is the number of energies to be used both in the final numerical
 integration and as the number of energies at which the hot carrier generation
 rate is being calculated.
 The last argument is the percentage of Chebyshev moments to be kept (useful
 for convergence analysis).
 For example, if this is set to 
\begin_inset Formula $70\%$
\end_inset

, then 
\begin_inset Formula $700$
\end_inset

 Chebyshev polynomials would be used instead of 
\begin_inset Formula $1000$
\end_inset

 (see numbers of previous point).
 The output file has three columns: 1) Set of energies at which the hot
 carrier generation rate is being evaluated, in units of eV; 2) Hot electron
 generation rate (units of eV⁻¹ s⁻¹); 3) Hot hole generation rate (units
 of eV⁻¹ s⁻¹).
\end_layout

\begin_layout Standard
These four files are interfaces to the julia libraries containing the algorithms.
 The scheme below sums up the workflow and the functions (and libraries)
 envolved in this process.
 See next sections for more detail on each.
 
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename code1.svg
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Interpretation of the hot carrier generation rates.
\end_layout

\begin_layout Standard
To do
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Technical information
\end_layout

\begin_layout Section
Transforming the Fermi Golden Rule
\end_layout

\begin_layout Standard
Since diagonalization is very hard to do for large matrices, we need to
 express 
\begin_inset Formula $N_{e}$
\end_inset

 in a different way in order to use a different set of methods.
 Let's begin by introducing two integrals over the energy in order to capture
 all the eigen-energies with Dirac deltas:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
N_{e}\left(E,\omega\right)=\frac{2}{V}\sum_{if}\int_{-\infty}^{\infty}d\varepsilon\int_{-\infty}^{\infty}d\varepsilon^{\prime}\delta\left(\varepsilon-E_{i}\right)\delta\left(\varepsilon^{\prime}-E_{f}\right)\Gamma_{if}\left(\omega\right)\delta\left(E-E_{f}\right)
\]

\end_inset

Now we just need to replace the eigen-energies:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
N_{e}\left(E,\omega\right)=\frac{4\pi}{\hbar V}\int_{-\infty}^{\infty}d\varepsilon\int_{-\infty}^{\infty}d\varepsilon^{\prime}f\left(\varepsilon\right)\left(1-f\left(\varepsilon^{\prime}\right)\right)\delta\left(E-\varepsilon^{\prime}\right)\delta\left(\varepsilon^{\prime}-\varepsilon-\hbar\omega\right)\sum_{if}\left|\left\langle f\left|\Phi_{\text{tot}}\left(\omega\right)\right|i\right\rangle \right|^{2}\delta\left(\varepsilon-E_{i}\right)\delta\left(\varepsilon^{\prime}-E_{f}\right)
\]

\end_inset

which motivates us to define the new object 
\begin_inset Formula 
\[
\Phi_{\omega}\left(\varepsilon,\varepsilon^{\prime}\right)=\sum_{if}\left|\left\langle f\left|\Phi_{\text{tot}}\left(\omega\right)\right|i\right\rangle \right|^{2}\delta\left(\varepsilon-E_{i}\right)\delta\left(\varepsilon^{\prime}-E_{f}\right).
\]

\end_inset

This object is a reinterpretation of the potential matrix element in energy
 space.
 Instead of telling us the matrix element of the initial state 
\begin_inset Formula $i$
\end_inset

 with final state 
\begin_inset Formula $f$
\end_inset

, it tells us the matrix element of initial state of energy 
\begin_inset Formula $\varepsilon$
\end_inset

 with final state of energy 
\begin_inset Formula $\varepsilon^{\prime}$
\end_inset

.
 It can be cast into a basis-independent form suitable for Chebyshev expansions:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Phi_{\omega}\left(\varepsilon,\varepsilon^{\prime}\right)=\text{Tr}\left[\Phi_{\text{tot}}\left(\omega\right)\delta\left(\varepsilon-H\right)\Phi_{\text{tot}}^{\dagger}\left(\omega\right)\delta\left(\varepsilon^{\prime}-H\right)\right].
\]

\end_inset

Plugging this back into the expression for the hot-carrier generation rate,
 we get 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
N_{e}\left(E,\omega\right)=\frac{4\pi}{\hbar V}\int_{-\infty}^{\infty}d\varepsilon\int_{-\infty}^{\infty}d\varepsilon^{\prime}f\left(\varepsilon\right)\left(1-f\left(\varepsilon^{\prime}\right)\right)\delta\left(E-\varepsilon^{\prime}\right)\delta\left(\varepsilon^{\prime}-\varepsilon-\hbar\omega\right)\Phi_{\omega}\left(\varepsilon,\varepsilon^{\prime}\right).
\]

\end_inset


\begin_inset Formula $\Phi_{\omega}\left(\varepsilon,\varepsilon^{\prime}\right)$
\end_inset

 is simply a function of two energies, so 
\begin_inset Formula $N_{e}\left(E,\omega\right)$
\end_inset

 can be obtained through a straightfoward numerical double integral.
 This form also makes it easier to interpret what is happening to 
\begin_inset Formula $\Phi_{\omega}\left(\varepsilon,\varepsilon^{\prime}\right)$
\end_inset

 during the integration process.
 Using the first Dirac delta to eliminate the integral in 
\begin_inset Formula $\varepsilon^{\prime},$
\end_inset

 the hot carrier generation rate can be simplified to
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
N_{e}\left(E,\omega\right)=\frac{4\pi}{\hbar V}\left(1-f\left(E\right)\right)\int_{-\infty}^{\infty}d\varepsilon f\left(\varepsilon\right)\delta_{\gamma}\left(E-\varepsilon-\hbar\omega\right)\Phi_{\omega}\left(\varepsilon,E\right).\label{eq: HC generation rate infinite precision-1}
\end{equation}

\end_inset

The final ingredient to understand the inner workings of the code is the
 Chebyshev expansion the Dirac delta operators inside of 
\begin_inset Formula $\Phi_{\omega}\left(\varepsilon,\varepsilon^{\prime}\right)$
\end_inset

.
 These operators can be expanded in a series of Chebyshev polynomials
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\delta\left(\varepsilon-H\right)=\sum_{n=0}^{M-1}\Delta_{n}\left(\varepsilon\right)T_{n}\left(H\right)
\]

\end_inset

where 
\begin_inset Formula 
\[
\Delta_{n}\left(\varepsilon\right)=\frac{2}{\delta_{n,0}+1}\frac{T_{n}\left(\varepsilon\right)}{\pi\sqrt{1-\varepsilon^{2}}}g_{J}^{n,M}
\]

\end_inset

is the coefficient of the expansion regularized by the Jackson weight 
\begin_inset Formula $g_{J}$
\end_inset

.
 Thus, 
\begin_inset Formula $\Phi_{\omega}\left(\varepsilon,\varepsilon^{\prime}\right)$
\end_inset

 is expressed as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Phi_{\omega}\left(\varepsilon,\varepsilon^{\prime}\right)=\text{Tr}\left[\Phi_{\text{tot}}\left(\omega\right)\left(\sum_{n=0}^{M-1}\Delta_{n}\left(\varepsilon\right)T_{n}\left(H\right)\right)\Phi_{\text{tot}}^{\dagger}\left(\omega\right)\left(\sum_{m=0}^{M-1}\Delta_{m}\left(\varepsilon^{\prime}\right)T_{m}\left(H\right)\right)\right]
\]

\end_inset

 and can be calculated in two steps.
 The first step is to calculate the Chebyshev moments
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mu_{nm}=\text{Tr}\left[\Phi_{\text{tot}}\left(\omega\right)T_{n}\left(H\right)\Phi_{\text{tot}}^{\dagger}\left(\omega\right)T_{m}\left(H\right)\right]
\]

\end_inset

and the second is to resum the matrix:
\begin_inset Formula 
\[
\Phi_{\omega}\left(\varepsilon,\varepsilon^{\prime}\right)=\sum_{n=0}^{M-1}\sum_{m=0}^{M-1}\Delta_{n}\left(\varepsilon\right)\Delta_{m}\left(\varepsilon^{\prime}\right)\mu_{nm}
\]

\end_inset


\end_layout

\begin_layout Section
Calculating the electric potential: Comsol
\end_layout

\begin_layout Standard
To find the electric potential inside the nanoparticle, we use Comsol to
 generate a simulation box representing the boundary conditions.
 We assume that the cube has side length 
\begin_inset Formula $L$
\end_inset

 and is centered at the origin.
 In order to generate a uniform electric field inside the nanoparticle,
 we impose boundary conditions 
\begin_inset Formula $V\left(z\right)=E_{0}z$
\end_inset

 on the faces of the cube.
 If 
\begin_inset Formula $z$
\end_inset

 is in units of nm and 
\begin_inset Formula $E_{0}=1$
\end_inset

 Volt/nm, then 
\begin_inset Formula $V$
\end_inset

 is in units of Volt.
 Finally, to convert from an electric potential to an electric potential
 energy 
\begin_inset Formula $\Phi_{0}=\left|e\right|V_{0}=1\text{eV}$
\end_inset

.
\end_layout

\begin_layout Standard
With these boundary conditions, we obtain an electric potential 
\begin_inset Formula $V\left(\mathbf{r}\right)$
\end_inset

 which depends nontrivially on the position because of the dielectric properties
 of the nanoparticle.
 Because of the boundary conditions imposed, away from the nanoparticle,
 we expect 
\begin_inset Formula $V\left(\left|\mathbf{r}\right|\rightarrow\infty\right)=E_{0}z$
\end_inset

.
 If the simulation box is sufficiently large, we expect the result not to
 depend on its size.
\end_layout

\begin_layout Subsection
Rescaling the electric field
\end_layout

\begin_layout Standard
By design, the electric field inside the simulation box is always 
\begin_inset Formula $E_{0}=1$
\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 V/nm.
 To analyze other electric fields, we make use of the linarity of Maxwell's
 equations: if the electric field is twice as strong, then the induced electrost
atic potential (in the quasistatic approximation) is twice as strong as
 well.
 Therefore, we can state that for a generic electric field strength 
\begin_inset Formula $E$
\end_inset

, the corresponding potential 
\begin_inset Formula $V_{E}$
\end_inset

 is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
V_{E}\left(\mathbf{r}\right)=\frac{E}{E_{0}}V_{E_{0}}\left(\mathbf{r}\right)
\]

\end_inset

so we can always use the default value of 
\begin_inset Formula $E_{0}$
\end_inset

 so long as we rescale it back to 
\begin_inset Formula $E$
\end_inset

 in the end.
 With this in mind, the electric potential energy term inside the expression
 for 
\begin_inset Formula $N_{e}$
\end_inset

 (eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq: HC generation rate infinite precision"
plural "false"
caps "false"
noprefix "false"

\end_inset

) can always be calculated with the default electric field in Comsol.
 Let 
\begin_inset Formula $\Phi^{0}$
\end_inset

 be the energy-resolved optical matrix with this potential.
 Then
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
N_{e}\left(\varepsilon,\omega\right)=\frac{4\pi}{\hbar V}\left(\frac{E}{E_{0}}\right)^{2}\left(1-f\left(\varepsilon\right)\right)\int_{-\infty}^{\infty}d\varepsilon f\left(\varepsilon\right)\delta_{\gamma}\left(E-\varepsilon-\hbar\omega\right)\Phi_{\omega}^{0}\left(\varepsilon,\varepsilon\right).
\]

\end_inset


\end_layout

\begin_layout Subsection
Rescaling the nanoparticle
\end_layout

\begin_layout Standard
Suppose that we want to find the electric potential inside several identically-s
haped nanoparticles, but with different sizes.
 For example, cubic nanoparticles of different side lengths.
 We can of course use larger simulation boxes for larger particles in order
 to mitigate boundary effects, but there's a trick that can be used: rescale
 the nanoparticles into having identical sizes and rescale the value of
 the electric potential by the same amount.
 
\end_layout

\begin_layout Standard
For example, suppose we want to find the electric potential inside a nanocube
 of length 
\begin_inset Formula $\ell=3\text{nm}$
\end_inset

 and another of length 
\begin_inset Formula $20\text{nm}$
\end_inset

.
 Let's further assume that we have already found the solution 
\begin_inset Formula $V_{\ell=3}\left(\mathbf{r}\right)$
\end_inset

 for all positions inside the smaller nanocube.
 Then, 
\begin_inset Formula $V_{\ell=3}\left(\mathbf{r}\right)=\frac{20}{3}V_{\ell=20}\left(\frac{3}{20}\mathbf{r}\right)$
\end_inset

.
 More generally, any two potential profiles are related through
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
aV_{\ell=a}\left(\frac{\mathbf{r}}{a}\right)=bV_{\ell=b}\left(\frac{\mathbf{r}}{b}\right).
\]

\end_inset

This is what is used in our implementation.
\end_layout

\begin_layout Subsection
Using Comsol
\end_layout

\begin_layout Standard
Details on using Comsol
\end_layout

\begin_layout Section
Chebyshev method
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Code
\end_layout

\begin_layout Section
External dependencies
\end_layout

\begin_layout Standard
These are the dependencies required to run the program.
\end_layout

\begin_layout Itemize
julia with the following dependencies
\end_layout

\begin_deeper
\begin_layout Itemize
DelimitedFiles 
\end_layout

\begin_layout Itemize
Printf 
\end_layout

\begin_layout Itemize
MKL 
\end_layout

\begin_layout Itemize
Random 
\end_layout

\begin_layout Itemize
Dates 
\end_layout

\begin_layout Itemize
MKLSparse 
\end_layout

\begin_layout Itemize
HDF5 
\end_layout

\begin_layout Itemize
NearestNeighbors 
\end_layout

\begin_layout Itemize
DataStructures 
\end_layout

\begin_layout Itemize
Interpolations 
\end_layout

\begin_layout Itemize
SparseArrays 
\end_layout

\begin_layout Itemize
LinearAlgebra 
\end_layout

\end_deeper
\begin_layout Standard
Lines to install them using the Julia prompt
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

using Pkg;
\end_layout

\begin_layout Plain Layout

Pkg.add.(["DelimitedFiles", "Printf", "MKL", "Random", "Dates", "MKLSparse",
 "HDF5", "NearestNeighbors", "DataStructures", "Interpolations", "SparseArrays",
 "LinearAlgebra"])
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
python3 with vpython for visualization
\end_layout

\begin_layout Section
Code organization [To do]
\end_layout

\begin_layout Standard
This program consists of a main code written in Julia (.jl) and several auxiliary
 programs in Python.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename code_org.svg
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagram showing how the code is organized.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
